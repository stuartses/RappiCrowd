"""
Module: insights
Gets the behavior a person using the IBM Personaly Insights
based in twitter profile
More information: https://cloud.ibm.com/docs/personality-insights
"""

from requests.auth import HTTPBasicAuth
import requests
import json
from personins import score


def send(type_in='', data_json='', data_text='', mode=''):
    """
    Make a http request to IBM cloud with the twitter profile in json
    This method use a specific url and API Key

    arguments:
        type_id: string with type of data. 'text' is profile, 'json' is twitter
        data_json: string with profile generated by twitter
        data_text: string with profile text

    return:
        dictionary with score and details

    """

    if (type_in == 'json' and data_json == ''):
        return {'status': 'error',
                'message': 'notwitter',
                'detail': 'No twitter json content'}

    if (type_in == 'text' and data_text == ''):
        return {'status': 'error',
                'message': 'noprofile',
                'detail': 'No profile text content'}

    url = "https://api.us-south.personality-insights.watson.cloud.ibm.com/"\
          "instances/a3341e42-5c96-4271-ab4e-7085fd3c7804/v3/profile?"\
          "version=2017-10-13/v3/profile?version=2017-10-13&"\
          "consumption_preferences=true&raw_scores=true"

    auth = HTTPBasicAuth(
        'apikey', 'I3f9Cnyv5LWMHFpWG-2yqQlUKre_Gry3VT0E7zBlBMRt')

    if (type_in == 'json'):
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'}
        data_bytes = bytes(data_json, 'utf-8')

    if (type_in == 'text'):
        headers = {
            'Content-Type': 'text/plain',
            'charset': 'utf-8',
            'Accept': 'application/json',
            'Content-Language': 'es'}
        data_bytes = bytes(data_text, 'utf-8')

    r_dict = {}  # request response
    send_dict = {}  # return
    score_dict = {}

    # for develop using a json file with a response and avoid request
    if (mode == 'dev'):
        with open('personins/dev-response.json', 'r') as f:
            tw = f.read()
            r_dict = json.loads(tw)
    else:
        try:
            r = requests.post(url, headers=headers, auth=auth, data=data_bytes)
        except requests.exceptions.RequestException as e:
            return {'status': 'error',
                    'message': 'ibmerror',
                    'detail': str(e)}

        r_dict = r.json()  # class dict (give dict not json)

    # check if response has an error code
    if 'code' in r_dict:
        return {'status': 'error',
                'message': 'ibmerror',
                'detail': r_dict}

    personal_dict = r_dict['personality']
    calc = score.get_score(personal_dict)
    score_dict['word_count'] = r_dict['word_count']
    score_dict['score'] = calc

    send_dict['status'] = 'ok'
    send_dict['message'] = 'ibmsucessfull'
    send_dict['content'] = score_dict

    """temporary save in file """
    """
    with open('personins/ibm-check.json', 'w') as f:
        f.write(json.dumps(r_dict))
    """

    return send_dict
